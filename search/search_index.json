{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RPC Reverse Proxy","text":"<p>Manage multiple Ethereum nodes with RPC Reverse Proxy,  a powerful tool that offers out-of-the-box features such as enhanced availability through redundancy or detailed usage statistics and control via a web-based interface. </p> <p>It is an HTTP proxy that handles Ethereum RPC calls and forwards them to connected Ethereum nodes.  It can act as a highly capable Ethereum RPC endpoint.  Written in Python, it can be run on any suitable machine, including virtualisation and Raspberry Pi.</p> <p>Note: RPC Reverse Proxy is a tool that can be used to organize and manage access to Ethereum nodes configured based on Web3 Pi Node Setup, as well as any other Ethereum node.</p> <p>RPC Reverse Proxy is in the Alpha version and some features are still under construction.</p> <p>Next Steps: install, connect nodes and manage access.</p>"},{"location":"admin/","title":"Admin Panel","text":"<p>When the proxy is started, the access url to the admin panel is generated. Check logs and grep the line that looks like this <pre><code>Access admin portal with:\nhttp://0.0.0.0:6561/?token=DJQPiFYBAks9n2vedLIXLtvUu3kuTe60\n</code></pre> Update the address part <code>0.0.0.0</code> in the url according to your network configuration if necessary. Note that the access token may change in the next run of the proxy. There is just one page.</p> <p></p>"},{"location":"admin/#nodes-stats","title":"Nodes stats","text":"<p>Admin panel provides simple usage stats on connected Ethereum nodes.</p> <p></p>"},{"location":"admin/#users","title":"Users","text":"<p>Users are managed with Admin Panel. Each user is identified by its API key. API key are case sensitive. It can be set the limit for calls and transferred bytes for each user.  In order to authorize a user in a RPC call, add API key to the path like</p> <pre><code>http(s)://&lt;web3pi-proxy-domain&gt;:&lt;web3pi-proxy-port&gt;/&lt;API-key&gt;\n</code></pre> <p>for instance</p> <pre><code>http://localhost:6512/abcdef\n</code></pre> <p>where the proxy is run on <code>localhost</code> on the port <code>6512</code> and a user's API key is <code>abcdef</code>.</p>"},{"location":"admin/#create-a-new-user","title":"Create a new user","text":"<p>Note that users need to have distinct API keys. </p> <p>Provice API key, a limit for calls (<code>Free Calls</code>) and a limit for transferred bytes (<code>Free Bytes</code>). Then press <code>Register User</code>.</p> <p></p> <p>WARNING Due to a bug, when API key is provided, do not hit <code>Enter</code> key, but press a button.  When the error page is received, simply go back to a previous page. Will be fixed soon, sorry for inconvenience. This is valid for this and below actions.</p>"},{"location":"admin/#update-a-user-configuration","title":"Update a user configuration","text":"<p>Provice existing API key - i.e. a user must exist. Provide a new limit for calls (<code>Free Calls</code>) and a new limit for transferred bytes (<code>Free Bytes</code>). Then press <code>Update User</code>.</p> <p></p>"},{"location":"admin/#remove-a-user","title":"Remove a user","text":"<p>Provice existing API key - i.e. a user must exist. Then press <code>Remove User</code>.</p> <p></p>"},{"location":"admin/#a-user-configuration","title":"A user configuration","text":"<p>Provice existing API key. There are two <code>API key</code> fields, be sure to pick the right one. Then press <code>User Billing Plan</code>. The response is shown in the text area on right.</p> <p></p>"},{"location":"admin/#a-user-stats","title":"A user stats","text":"<p>Provice existing API key. Then press <code>User Billing Stats</code>. The response is shown in the text area on right.</p> <p></p>"},{"location":"admin/#billing","title":"Billing","text":"<p>The functionality is under construction.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This page describes primary configuration of the proxy.</p> <p>The default configuration can be overriden with <code>.env</code> file or environment variables.</p> <p>In order to provide file configuration,  create an empty file <code>.env</code> in the place of running the RPC Reverse Proxy. Any environment record in the file overrides the default value.</p>"},{"location":"configuration/#ethereum-nodes","title":"Ethereum nodes","text":"<p>The list of connected Ethereum nodes are to be passed in the <code>.env</code>, an example of the <code>.env</code> file <pre><code>ETH_ENDPOINTS='[{\"name\": \"rpi5\", \"url\": \"http://192.168.1.90:8545/\"}, {\"name\": \"rpi4\", \"url\": \"http://192.168.1.224:8545/\"} ]'\n</code></pre> or via the environment variable, an example <pre><code>ETH_ENDPOINTS='[{\"name\": \"rpi5\", \"url\": \"http://192.168.1.90:8545/\"}, {\"name\": \"rpi4\", \"url\": \"http://192.168.1.224:8545/\"} ]' web3pi-proxy\n</code></pre></p> <p>Note that the value of <code>ETH_ENDPOINTS</code> must be a valid json.  In case of startup errors double check this configuration. Names of endpoints are arbitrary. Endpoints are to be any valid Ethereum RPC services, not necessary Web3 Pi installation.</p>"},{"location":"configuration/#ports-and-addresses","title":"Ports and Addresses","text":"<p>Modify the proxy addresses with the following records <pre><code>PROXY_LISTEN_ADDRESS='0.0.0.0'\nPROXY_LISTEN_PORT=6512\nADMIN_LISTEN_PORT=6561\n</code></pre></p> <p>To initialize UPnP set <pre><code>USE_UPNP='True'\n</code></pre></p> <p>To use SSL set <pre><code>SSL_ENABLED=True\nSSL_CERT_FILE='cert.pem'\nSSL_KEY_FILE='key.pem'\n</code></pre></p>"},{"location":"configuration/#other","title":"Other","text":"<p>You can find other configurtion records in the source file conf.py</p>"},{"location":"downloads/","title":"Downloads","text":"<p>The latest release on pypi RPC Reverse Proxy</p> <p>The github repository RPC Reverse Proxy</p>"},{"location":"installation/","title":"Installation","text":"<p>The RPC Reverse Proxy is independent sofware to Web3 Pi nodes and othere Ethereum nodes. It can be installed on any machine that can directly or via tunnels  connect to your Ethereum nodes.  There is no restriction if hardware parameters are sufficent -  and this is satisfied in most cases since the proxy is lightweight. For instance it can be installed on PC, a dedicated  Raspberry Pi, or collocated with one of Ethereum nodes.</p> <p>The instruction is provided for Linux.  Windows instalation needs further examination.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<p>To run the proxy, <code>python &gt;= 3.10</code> is required</p>"},{"location":"installation/#installation","title":"Installation","text":"<p>Before proceeding further, verify the python's version. Should be at least <code>3.10</code>.</p> <pre><code>user@host:~$ python3 --version\n</code></pre> <p>At first create a data directory for RPC Reverse Proxy instance and change the working directory to it. For the purposes of demonstration assume that the data directory is <code>web3pi</code> in the user's home folder. Then the example commands are</p> <pre><code>user@host:~$ mkdir web3pi\nuser@host:~$ cd web3pi\nuser@host:~/web3pi$\n</code></pre> <p>You may wish preferably to use a python's virtual environment <code>venv</code>.  Note that this is optional. For example, create a virtual environment <code>venv</code>. <pre><code>user@host:~/web3pi$ python3 -m venv venv\n</code></pre></p> <p>The folder <code>venv</code> is created in the place. Now activate the virtual environment.</p> <pre><code>user@host:~/web3pi$ source venv/bin/activate\n(venv) user@host:~/web3pi$\n</code></pre> <p>Get latest version from pypi</p> <pre><code>(venv) user@host:~/web3pi$ pip install web3pi-proxy\n</code></pre>"},{"location":"installation/#configuration","title":"Configuration","text":"<p>Before running for the first time, a basic configuration with Ethereum nodes addresses needs to be provided. For more options and further details see Configuration and Monitoring. Here is simple configuration that allows the proxy to run.</p> <p>Create the file <code>.env</code>. Note the the file name must be exactly <code>.env</code>.</p> <pre><code>(venv) user@host:~/web3pi$ touch .env\n</code></pre> <p>Edit the file with an editor of your preference, and provide variable/value records. In simple configuration only the variable <code>ETH_ENDPOINTS</code> needs to be set. It lists Ethereum nodes to be connected. A basic example of <code>.env</code> file content is as follows.</p> <pre><code>(venv) user@host:~/web3pi$ cat .env\nETH_ENDPOINTS='[{\"name\": \"my_node\", \"url\": \"http://192.168.1.90:8545/\"}]'\n</code></pre> <p>Remember that the value of <code>ETH_ENDPOINTS</code> must be a valid json.  Furthermore, this is an array of objects, each describing one Ethereum node with  arbitrary but distinct <code>name</code> (pick one you like) and <code>url</code> which is an RPC endpoint of Ethereum node.</p>"},{"location":"installation/#run","title":"Run","text":"<p>Simply execute</p> <pre><code>(venv) user@host:~/web3pi$ web3pi-proxy\n</code></pre> <p>Ctrl+C (<code>SIGTERM</code>) shuts down the proxy.</p>"},{"location":"installation/#admin-panel","title":"Admin panel","text":"<p>When the proxy is up, you can check it in the admin panel. Here is a short instruction how to open. The access url to the admin panel is generated at the start of proxy. Check logs and grep the line that looks like this <pre><code>Access admin portal with:\nhttp://0.0.0.0:6561/?token=DJQPiFYBAks9n2vedLIXLtvUu3kuTe60\n</code></pre> Update the address part <code>0.0.0.0</code> in the url according to your network configuration. The excerpt above is an example, use a token that is actually included in your logs. Note that the access token may change in the next run of the proxy.</p> <p>See Admin Panel for details.</p>"},{"location":"public/","title":"Public Service","text":"<p>This section describes how to bring your Ethereum nodes to the public with RPC Reverse Proxy. There are multiple configurations to achieve this. Here are a few.</p>"},{"location":"public/#own-public-ip","title":"Own Public IP","text":"<p>The easiest way is to have your own public IP.</p> <p>The configuration assumes to have RPC Reverse Proxy and Ethereum nodes connected in a local network and expose the proxy service to the internet with the public IP. The caveat is that you have to have the public IP.</p>"},{"location":"public/#upnp","title":"UPnP","text":"<p>If UPnP is enabled in the router, configure it in RPC Reverse Proxy. See Configuration page for further steps.</p>"},{"location":"public/#rent-public-ip","title":"Rent Public IP","text":"<p>It is possible to rent the public IP from external providers, for instance from cloud providers. The configuration assumes to have the public IP at an external provider,  RPC Reverse Proxy and Ethereum nodes connected in a local network. You need a kind of tunnel established to forward clients communication to the local network. Providing a convenient solution is on our roadmap and it will be supported in the future.</p>"},{"location":"state/","title":"Proxy Data","text":"<p>RPC Reverse Proxy persists state data like usage stats and settings between runs. In the place that the proxy is run a data file is created. <pre><code>.w3appdata/web3pi_proxy.sqlite3\n</code></pre> It is safe to delete this file when the proxy is down in order to clear stats and settings.</p> <p>Note that if you run the proxy in a new location, the state is carried over automatically. And you cannot run two instances of the proxy simultaneously in the same location.</p>"},{"location":"wallet/","title":"Wallets","text":"<p>Any client can connet RPC Reverse Proxy. A web client, scripting tools,  backend servers etc.  It is the same as with other Ethereum RPC providers: you need to use a user's access URL. Recall that it has the form like</p> <pre><code>http(s)://&lt;web3pi-proxy-domain&gt;:&lt;web3pi-proxy-port&gt;/&lt;API-key&gt;\n</code></pre> <p>for instance</p> <pre><code>http://localhost:6512/abcdef\n</code></pre> <p>where the proxy is run on <code>localhost</code> on the port <code>6512</code> and a user's API key is <code>abcdef</code>.</p> <p>In particular one can integrate a wallet. The remaining section refers to this matter. </p>"},{"location":"wallet/#example","title":"Example","text":"<p>We present an example where Metamask is integrated. Other wallets should work as well in a similar way.  A new Mainnet network is created here, so you end up having two Mainnet networks.</p> <ol> <li>Prepare the access URL.</li> <li>Open Browser and open Metamask.</li> <li>Open Settings and click Add a network.</li> <li>Provide appropriate data. Note New RPC URL input, this is a crucial part, and enter the access URL. Recall that the access URL contains the proxy address and API key.</li> </ol> <p></p> <p>Now you can connect an application to the wallet in the usual way. Make sure the wallet is switched to the correct network.</p>"},{"location":"wallet/#testing","title":"Testing","text":"<p>In order to verify the configuration, use any dapp. Here we use Uniswap, feel free to test other apps. Note that Metamast makes some calls by its own.</p> <ol> <li>Switch the wallet to the right network.</li> <li>Open the dapp webpage.</li> <li>Connect the wallet in a regular way. </li> <li>Use dapp. No need to perform a swap actually.</li> <li>Check the stats at Admin Panel. See the traffic stats increase.</li> </ol> <p></p>"}]}